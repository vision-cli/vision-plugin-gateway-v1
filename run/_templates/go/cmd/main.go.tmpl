package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/rs/zerolog/log"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"

	"{{.ServiceFqn}}/config"
	"{{.ServiceFqn}}/handlers"
)

func main() {
	conf := mustLoadConfig()
	err := runProxy(conf)
	if err != nil {
		log.Fatal().Err(err).Msg("failed to run gateway service")
	}
}

func runProxy(conf *config.Config) error {
	ctx := context.Background()
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	systemRoots, err := x509.SystemCertPool()
	if err != nil {
		return err
	}
	cred := credentials.NewTLS(&tls.Config{
		RootCAs: systemRoots,
	})

	mux := runtime.NewServeMux()
	opts := []grpc.DialOption{}
	if conf.GrpcPort == "8080" {
		// running locally
		opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	} else {
		// running in cloud run
		opts = append(opts, grpc.WithTransportCredentials(cred))
	}

	// Register multiple grpc services
	err = handlers.Register(opts, mux, conf, ctx)
	if err != nil {
		return fmt.Errorf("failed to register grpc service %w", err)
	}

	log.Info().Msgf("{{.ServiceName | Pascal}} server listening at %s:%s", conf.ProxyHost, conf.ProxyPort)
	return http.ListenAndServe(fmt.Sprintf("%s:%s", conf.ProxyHost, conf.ProxyPort), mux)
}

func mustLoadConfig() *config.Config {
	conf, err := config.Load()
	if err != nil {
		log.Fatal().Err(err).Msg("error loading app config")
	}
	return conf
}
